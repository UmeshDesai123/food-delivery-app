import { OrderRepositoryService } from '../../repository/order/order.repository.service';
import { FoodOutletsRepositoryService } from '../../repository/food-outlets/food-outlets.repository.service';
import { UserRepositoryService } from '../../repository/user/user.repository.service';
import { Orders } from '../../entities/order/order.schema';
import { OrderResponse } from '../../controllers/order/dto/order-response.dto';
import { FoodOutletsService } from '../food-outlets/food-outlets.service';
import { CreateOrderDto } from '../../controllers/order/dto/create-order.dto';
import { UpdateOrderDto } from '../../controllers/order/dto/update-order.dto';
export declare class OrderService {
    private readonly orderRepositoryService;
    private readonly foodOutletsRepositoryService;
    private readonly userRepositoryService;
    private readonly foodOutletsService;
    constructor(orderRepositoryService: OrderRepositoryService, foodOutletsRepositoryService: FoodOutletsRepositoryService, userRepositoryService: UserRepositoryService, foodOutletsService: FoodOutletsService);
    createOrder(order: CreateOrderDto): Promise<any>;
    getOrderById(id: string): Promise<{
        orderId: string;
        userId: string;
        userName: string;
        userAdd: string;
        userEmail: string;
        hotelId: string;
        hotelName: string;
        hotelAdd: string;
        orderItems: any[];
        totalPrice: number;
        employeeId: string;
        employeeName: string;
        orderStatus: string;
    }>;
    getUserOrderHistory(userId: string): Promise<OrderResponse[]>;
    updateOrderStatus(orderId: string, updateBody: UpdateOrderDto): Promise<{
        orderId: string;
        userId: string;
        userName: string;
        userAdd: string;
        userEmail: string;
        hotelId: string;
        hotelName: string;
        hotelAdd: string;
        orderItems: any[];
        totalPrice: number;
        employeeId: string;
        orderStatus: string;
    }>;
    placeOrder(orderId: any): Promise<{
        orderId: string;
        userId: string;
        userName: string;
        userAdd: string;
        userEmail: string;
        hotelId: string;
        hotelName: string;
        hotelAdd: string;
        orderItems: any[];
        totalPrice: number;
        employeeId: string;
        orderStatus: string;
    }>;
    getOrderResponse(order: Orders): Promise<{
        orderId: string;
        userId: string;
        userName: string;
        userAdd: string;
        userEmail: string;
        hotelId: string;
        hotelName: string;
        hotelAdd: string;
        orderItems: any[];
        totalPrice: number;
        employeeId: string;
        employeeName: string;
        orderStatus: string;
    }>;
    setOrderResponse(order: Orders): Promise<{
        orderId: string;
        userId: string;
        userName: string;
        userAdd: string;
        userEmail: string;
        hotelId: string;
        hotelName: string;
        hotelAdd: string;
        orderItems: any[];
        totalPrice: number;
        employeeId: string;
        orderStatus: string;
    }>;
}
